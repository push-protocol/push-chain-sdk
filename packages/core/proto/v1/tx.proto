syntax = "proto3";

package ue.v1;

// UniversalAccount is the identifier of a owner account
message UniversalAccountId {
  string chain_namespace = 1; // chain_namespace is the CAIP-2 namespace of the chain where the owner is located (e.g. "eip155" for Ethereum)
  string chain_id = 2; // chain_id is the chain ID of the chain where the owner is located
  string owner = 3; // Owner's public key bytes or address in hex format
}

// MsgDeployUEA is the message used to deploy a new smart account.
message MsgDeployUEA {
  // signer is the Cosmos address initiating the tx (used for tx signing)
  string signer = 1;

  // universal_account is the identifier of the owner account
  UniversalAccountId universal_account_id = 2;

  // tx_hash is the hash of the transaction in which user locked the tokens
  string tx_hash = 3;
}

// MsgMintPC represents a message to mint PUSH tokens to a smart account,
// based on the amount locked by the user in the gateway contract.
message MsgMintPC {
  // signer is the Cosmos address initiating the tx (used for tx signing)
  string signer = 1;

  // universal_account is the identifier of the owner account
  UniversalAccountId universal_account_id = 2;

  // tx_hash is the hash of the transaction in which user locked the tokens
  string tx_hash = 3;
}

// Signature verification types
enum VerificationType {
  signedVerification = 0; // Signed verification using a signature
  universalTxVerification = 1; // Universal transaction verification
}

// UniversalPayload mirrors the Solidity struct
message UniversalPayload {
  string to = 1;                 // EVM address as hex string (0x...)
  string value = 2;                  // Amount in upc as string (uint256)
  string data = 3;                    // ABI-encoded calldata
  string gas_limit = 4;             // uint256 as string
  string max_fee_per_gas = 5;       // uint256 as string
  string max_priority_fee_per_gas = 6; // uint256 as string
  string nonce = 7;                 // uint256 as string
  string deadline = 8;              // uint256 as string
  VerificationType v_type = 9; // Type of signature verification
}

// MsgExecutePayload defines a message for executing a universal payload
message MsgExecutePayload {
  // signer is the Cosmos address initiating the tx (used for tx signing)
  string signer = 1;

  // universal_account is the identifier of the owner account
  UniversalAccountId universal_account_id = 2;

  // payload is the universal payload to be executed
  UniversalPayload universal_payload = 3;

  // signature is the signature of the payload by user
  string verification_data = 4;
}