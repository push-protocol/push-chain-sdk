// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "ue.v1";

/** Signature verification types */
export enum VerificationType {
  /** signedVerification - Signed verification using a signature */
  signedVerification = 0,
  /** universalTxVerification - Universal transaction verification */
  universalTxVerification = 1,
  UNRECOGNIZED = -1,
}

export function verificationTypeFromJSON(object: any): VerificationType {
  switch (object) {
    case 0:
    case "signedVerification":
      return VerificationType.signedVerification;
    case 1:
    case "universalTxVerification":
      return VerificationType.universalTxVerification;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VerificationType.UNRECOGNIZED;
  }
}

export function verificationTypeToJSON(object: VerificationType): string {
  switch (object) {
    case VerificationType.signedVerification:
      return "signedVerification";
    case VerificationType.universalTxVerification:
      return "universalTxVerification";
    case VerificationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** UniversalAccount is the identifier of a owner account */
export interface UniversalAccountId {
  /** chain_namespace is the CAIP-2 namespace of the chain where the owner is located (e.g. "eip155" for Ethereum) */
  chainNamespace: string;
  /** chain_id is the chain ID of the chain where the owner is located */
  chainId: string;
  /** Owner's public key bytes or address in hex format */
  owner: string;
}

/** MsgDeployUEA is the message used to deploy a new smart account. */
export interface MsgDeployUEA {
  /** signer is the Cosmos address initiating the tx (used for tx signing) */
  signer: string;
  /** universal_account is the identifier of the owner account */
  universalAccountId:
    | UniversalAccountId
    | undefined;
  /** tx_hash is the hash of the transaction in which user locked the tokens */
  txHash: string;
}

/**
 * MsgMintPC represents a message to mint PUSH tokens to a smart account,
 * based on the amount locked by the user in the gateway contract.
 */
export interface MsgMintPC {
  /** signer is the Cosmos address initiating the tx (used for tx signing) */
  signer: string;
  /** universal_account is the identifier of the owner account */
  universalAccountId:
    | UniversalAccountId
    | undefined;
  /** tx_hash is the hash of the transaction in which user locked the tokens */
  txHash: string;
}

/** UniversalPayload mirrors the Solidity struct */
export interface UniversalPayload {
  /** EVM address as hex string (0x...) */
  to: string;
  /** Amount in upc as string (uint256) */
  value: string;
  /** ABI-encoded calldata */
  data: string;
  /** uint256 as string */
  gasLimit: string;
  /** uint256 as string */
  maxFeePerGas: string;
  /** uint256 as string */
  maxPriorityFeePerGas: string;
  /** uint256 as string */
  nonce: string;
  /** uint256 as string */
  deadline: string;
  /** Type of signature verification */
  vType: VerificationType;
}

/** MsgExecutePayload defines a message for executing a universal payload */
export interface MsgExecutePayload {
  /** signer is the Cosmos address initiating the tx (used for tx signing) */
  signer: string;
  /** universal_account is the identifier of the owner account */
  universalAccountId:
    | UniversalAccountId
    | undefined;
  /** payload is the universal payload to be executed */
  universalPayload:
    | UniversalPayload
    | undefined;
  /** signature is the signature of the payload by user */
  verificationData: string;
}

function createBaseUniversalAccountId(): UniversalAccountId {
  return { chainNamespace: "", chainId: "", owner: "" };
}

export const UniversalAccountId: MessageFns<UniversalAccountId> = {
  encode(message: UniversalAccountId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chainNamespace !== "") {
      writer.uint32(10).string(message.chainNamespace);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UniversalAccountId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniversalAccountId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chainNamespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniversalAccountId {
    return {
      chainNamespace: isSet(object.chainNamespace) ? globalThis.String(object.chainNamespace) : "",
      chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: UniversalAccountId): unknown {
    const obj: any = {};
    if (message.chainNamespace !== "") {
      obj.chainNamespace = message.chainNamespace;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniversalAccountId>, I>>(base?: I): UniversalAccountId {
    return UniversalAccountId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniversalAccountId>, I>>(object: I): UniversalAccountId {
    const message = createBaseUniversalAccountId();
    message.chainNamespace = object.chainNamespace ?? "";
    message.chainId = object.chainId ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseMsgDeployUEA(): MsgDeployUEA {
  return { signer: "", universalAccountId: undefined, txHash: "" };
}

export const MsgDeployUEA: MessageFns<MsgDeployUEA> = {
  encode(message: MsgDeployUEA, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.universalAccountId !== undefined) {
      UniversalAccountId.encode(message.universalAccountId, writer.uint32(18).fork()).join();
    }
    if (message.txHash !== "") {
      writer.uint32(26).string(message.txHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeployUEA {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeployUEA();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.universalAccountId = UniversalAccountId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeployUEA {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      universalAccountId: isSet(object.universalAccountId)
        ? UniversalAccountId.fromJSON(object.universalAccountId)
        : undefined,
      txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
    };
  },

  toJSON(message: MsgDeployUEA): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.universalAccountId !== undefined) {
      obj.universalAccountId = UniversalAccountId.toJSON(message.universalAccountId);
    }
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDeployUEA>, I>>(base?: I): MsgDeployUEA {
    return MsgDeployUEA.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDeployUEA>, I>>(object: I): MsgDeployUEA {
    const message = createBaseMsgDeployUEA();
    message.signer = object.signer ?? "";
    message.universalAccountId = (object.universalAccountId !== undefined && object.universalAccountId !== null)
      ? UniversalAccountId.fromPartial(object.universalAccountId)
      : undefined;
    message.txHash = object.txHash ?? "";
    return message;
  },
};

function createBaseMsgMintPC(): MsgMintPC {
  return { signer: "", universalAccountId: undefined, txHash: "" };
}

export const MsgMintPC: MessageFns<MsgMintPC> = {
  encode(message: MsgMintPC, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.universalAccountId !== undefined) {
      UniversalAccountId.encode(message.universalAccountId, writer.uint32(18).fork()).join();
    }
    if (message.txHash !== "") {
      writer.uint32(26).string(message.txHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgMintPC {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMintPC();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.universalAccountId = UniversalAccountId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgMintPC {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      universalAccountId: isSet(object.universalAccountId)
        ? UniversalAccountId.fromJSON(object.universalAccountId)
        : undefined,
      txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
    };
  },

  toJSON(message: MsgMintPC): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.universalAccountId !== undefined) {
      obj.universalAccountId = UniversalAccountId.toJSON(message.universalAccountId);
    }
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgMintPC>, I>>(base?: I): MsgMintPC {
    return MsgMintPC.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgMintPC>, I>>(object: I): MsgMintPC {
    const message = createBaseMsgMintPC();
    message.signer = object.signer ?? "";
    message.universalAccountId = (object.universalAccountId !== undefined && object.universalAccountId !== null)
      ? UniversalAccountId.fromPartial(object.universalAccountId)
      : undefined;
    message.txHash = object.txHash ?? "";
    return message;
  },
};

function createBaseUniversalPayload(): UniversalPayload {
  return {
    to: "",
    value: "",
    data: "",
    gasLimit: "",
    maxFeePerGas: "",
    maxPriorityFeePerGas: "",
    nonce: "",
    deadline: "",
    vType: 0,
  };
}

export const UniversalPayload: MessageFns<UniversalPayload> = {
  encode(message: UniversalPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.to !== "") {
      writer.uint32(10).string(message.to);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.data !== "") {
      writer.uint32(26).string(message.data);
    }
    if (message.gasLimit !== "") {
      writer.uint32(34).string(message.gasLimit);
    }
    if (message.maxFeePerGas !== "") {
      writer.uint32(42).string(message.maxFeePerGas);
    }
    if (message.maxPriorityFeePerGas !== "") {
      writer.uint32(50).string(message.maxPriorityFeePerGas);
    }
    if (message.nonce !== "") {
      writer.uint32(58).string(message.nonce);
    }
    if (message.deadline !== "") {
      writer.uint32(66).string(message.deadline);
    }
    if (message.vType !== 0) {
      writer.uint32(72).int32(message.vType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UniversalPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniversalPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.gasLimit = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.maxFeePerGas = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.maxPriorityFeePerGas = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nonce = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.deadline = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.vType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniversalPayload {
    return {
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      gasLimit: isSet(object.gasLimit) ? globalThis.String(object.gasLimit) : "",
      maxFeePerGas: isSet(object.maxFeePerGas) ? globalThis.String(object.maxFeePerGas) : "",
      maxPriorityFeePerGas: isSet(object.maxPriorityFeePerGas) ? globalThis.String(object.maxPriorityFeePerGas) : "",
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
      deadline: isSet(object.deadline) ? globalThis.String(object.deadline) : "",
      vType: isSet(object.vType) ? verificationTypeFromJSON(object.vType) : 0,
    };
  },

  toJSON(message: UniversalPayload): unknown {
    const obj: any = {};
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.gasLimit !== "") {
      obj.gasLimit = message.gasLimit;
    }
    if (message.maxFeePerGas !== "") {
      obj.maxFeePerGas = message.maxFeePerGas;
    }
    if (message.maxPriorityFeePerGas !== "") {
      obj.maxPriorityFeePerGas = message.maxPriorityFeePerGas;
    }
    if (message.nonce !== "") {
      obj.nonce = message.nonce;
    }
    if (message.deadline !== "") {
      obj.deadline = message.deadline;
    }
    if (message.vType !== 0) {
      obj.vType = verificationTypeToJSON(message.vType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniversalPayload>, I>>(base?: I): UniversalPayload {
    return UniversalPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniversalPayload>, I>>(object: I): UniversalPayload {
    const message = createBaseUniversalPayload();
    message.to = object.to ?? "";
    message.value = object.value ?? "";
    message.data = object.data ?? "";
    message.gasLimit = object.gasLimit ?? "";
    message.maxFeePerGas = object.maxFeePerGas ?? "";
    message.maxPriorityFeePerGas = object.maxPriorityFeePerGas ?? "";
    message.nonce = object.nonce ?? "";
    message.deadline = object.deadline ?? "";
    message.vType = object.vType ?? 0;
    return message;
  },
};

function createBaseMsgExecutePayload(): MsgExecutePayload {
  return { signer: "", universalAccountId: undefined, universalPayload: undefined, verificationData: "" };
}

export const MsgExecutePayload: MessageFns<MsgExecutePayload> = {
  encode(message: MsgExecutePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.universalAccountId !== undefined) {
      UniversalAccountId.encode(message.universalAccountId, writer.uint32(18).fork()).join();
    }
    if (message.universalPayload !== undefined) {
      UniversalPayload.encode(message.universalPayload, writer.uint32(26).fork()).join();
    }
    if (message.verificationData !== "") {
      writer.uint32(34).string(message.verificationData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgExecutePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgExecutePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.universalAccountId = UniversalAccountId.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.universalPayload = UniversalPayload.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.verificationData = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgExecutePayload {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      universalAccountId: isSet(object.universalAccountId)
        ? UniversalAccountId.fromJSON(object.universalAccountId)
        : undefined,
      universalPayload: isSet(object.universalPayload) ? UniversalPayload.fromJSON(object.universalPayload) : undefined,
      verificationData: isSet(object.verificationData) ? globalThis.String(object.verificationData) : "",
    };
  },

  toJSON(message: MsgExecutePayload): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.universalAccountId !== undefined) {
      obj.universalAccountId = UniversalAccountId.toJSON(message.universalAccountId);
    }
    if (message.universalPayload !== undefined) {
      obj.universalPayload = UniversalPayload.toJSON(message.universalPayload);
    }
    if (message.verificationData !== "") {
      obj.verificationData = message.verificationData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgExecutePayload>, I>>(base?: I): MsgExecutePayload {
    return MsgExecutePayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgExecutePayload>, I>>(object: I): MsgExecutePayload {
    const message = createBaseMsgExecutePayload();
    message.signer = object.signer ?? "";
    message.universalAccountId = (object.universalAccountId !== undefined && object.universalAccountId !== null)
      ? UniversalAccountId.fromPartial(object.universalAccountId)
      : undefined;
    message.universalPayload = (object.universalPayload !== undefined && object.universalPayload !== null)
      ? UniversalPayload.fromPartial(object.universalPayload)
      : undefined;
    message.verificationData = object.verificationData ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
